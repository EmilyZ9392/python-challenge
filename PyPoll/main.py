{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Election Results\n",
      "--------------------------\n",
      "Total Votes: 3521001\n",
      "Khan: 63.0% (2218231)\n",
      "Correy: 20.0% (704200)\n",
      "Li: 14.0% (492940)\n",
      "O'Tooley: 3.0% (105630)\n",
      "---------------------------\n",
      "Winner: Khan\n",
      "---------------------------\n"
     ]
    }
   ],
   "source": [
    "# Import dependencies\n",
    "import os\n",
    "import csv\n",
    "\n",
    "# define variables\n",
    "candidates = []\n",
    "total_votes = 0\n",
    "vote_count = []\n",
    "\n",
    "poll_data = ['1']\n",
    "\n",
    "\n",
    "# for loop \n",
    "for files in poll_data:\n",
    "    \n",
    "    #csv path \n",
    "    \n",
    "    poll_path = os.path.join(os.getcwd(), 'resources', 'poll.csv')\n",
    "\n",
    "    # open/read csv\n",
    "    with open(poll_path) as csvfile:\n",
    "\n",
    "        csvreader = csv.reader(csvfile, delimiter=',')\n",
    "\n",
    "        # skip headers\n",
    "        line = next(csvreader,None)\n",
    "\n",
    "        # count votes\n",
    "        for line in csvreader:\n",
    "\n",
    "            # counter for total number of votes\n",
    "            total_votes = total_votes + 1\n",
    "\n",
    "            # tie votes per candiate\n",
    "            candidate = line[2]\n",
    "\n",
    "            # add to counter if cand has more than 1 vote\n",
    "            if candidate in candidates:\n",
    "                candidate_index = candidates.index(candidate)\n",
    "                vote_count[candidate_index] = vote_count[candidate_index] + 1\n",
    "            # else create new counter for candidate\n",
    "            else:\n",
    "                candidates.append(candidate)\n",
    "                vote_count.append(1)\n",
    "\n",
    "    # define variables for additional calcs\n",
    "    percentage = []\n",
    "    max_votes = vote_count[0]\n",
    "    max_index = 0\n",
    "\n",
    "    # % per cand and winner\n",
    "    for count in range(len(candidates)):\n",
    "        vote_percentage = vote_count[count]/total_votes*100\n",
    "        percentage.append(vote_percentage)\n",
    "        if vote_count[count] > max_votes:\n",
    "            max_votes = vote_count[count]\n",
    "            print(max_votes)\n",
    "            max_index = count\n",
    "    winner = candidates[max_index]\n",
    "\n",
    "    # round\n",
    "\n",
    "    percentage = [round(i,2) for i in percentage]\n",
    "\n",
    "    # print results\n",
    "    print(\"Election Results\")\n",
    "    print(\"--------------------------\")\n",
    "    print(f\"Total Votes: {total_votes}\")\n",
    "    for count in range(len(candidates)):\n",
    "        print(f\"{candidates[count]}: {percentage[count]}% ({vote_count[count]})\")\n",
    "    print(\"---------------------------\")\n",
    "    print(f\"Winner: {winner}\")\n",
    "    print(\"---------------------------\")\n",
    "    \n",
    "    \n",
    "    #output file path\n",
    "    \n",
    "    pypoll_output = poll_path[0:-4]\n",
    "    \n",
    "    write_poll_data = f'{pypoll_output}pypoll_results.txt'\n",
    "\n",
    "    # open text file\n",
    "    filewriter = open(pypoll_output, mode = 'w')\n",
    "\n",
    "    # write to text file\n",
    "    filewriter.write(\"Election Results\\n\")\n",
    "    filewriter.write(\"--------------------------\\n\")\n",
    "    filewriter.write(f\"Total Votes: {total_votes}\\n\")\n",
    "    for count in range(len(candidates)):\n",
    "        filewriter.write(f\"{candidates[count]}: {percentage[count]}% ({vote_count[count]})\\n\")\n",
    "    filewriter.write(\"---------------------------\\n\")\n",
    "    filewriter.write(f\"Winner: {winner}\\n\")\n",
    "    filewriter.write(\"---------------------------\\n\")\n",
    "    \n",
    "   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
